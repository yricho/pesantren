generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("POSTGRES_URL")
}

model User {
  id                        String                 @id @default(cuid())
  username                  String                 @unique
  email                     String                 @unique
  password                  String
  name                      String
  role                      String                 @default("STAFF")
  isUstadz                  Boolean                @default(false)
  isActive                  Boolean                @default(true)
  createdAt                 DateTime               @default(now())
  updatedAt                 DateTime               @updatedAt
  twoFactorEnabled          Boolean                @default(false)
  twoFactorSecret           String?
  backupCodes               String[]               @default([])
  phoneVerified             Boolean                @default(false)
  createdActivities         Activity[]
  createdAlumni             Alumni[]
  answeredQuestions         Answer[]               @relation("UstadzAnswers")
  attendancesMarked         Attendance[]           @relation("AttendanceMarker")
  auditTrails               AuditTrail[]
  createdBudgets            Budget[]
  homeroom_classes          Class[]                @relation("ClassTeacher")
  createdCourses            Course[]
  createdCampaigns          DonationCampaign[]
  createdEbooks             Ebook[]
  exams                     Exam[]                 @relation("ExamTeacher")
  createdReports            FinancialReport[]
  hafalanRecordsAsTeacher   HafalanRecord[]        @relation("HafalanTeacher")
  hafalanSessionsAsTeacher  HafalanSession[]       @relation("HafalanSessionTeacher")
  hafalanTargetsCreated     HafalanTarget[]        @relation("HafalanTargetCreator")
  createdJournalEntries     JournalEntry[]
  lineAdmin                 LineAdmin?
  receivedMessages          Message[]              @relation("MessageReceiver")
  sentMessages              Message[]              @relation("MessageSender")
  notifications             Notification[]
  parentAccount             ParentAccount?
  createdPurchaseOrders     PurchaseOrder[]
  pushSubscriptions         PushSubscription[]
  schedules                 Schedule[]             @relation("ScheduleTeacher")
  securityAuditLogs         SecurityAuditLog[]
  setoranSchedulesAsTeacher SetoranSchedule[]      @relation("SetoranTeacher")
  createdStudents           Student[]
  teacherSubjects           TeacherSubject[]       @relation("TeacherSubject")
  createdTeachers           Teacher[]
  createdTransactions       Transaction[]
  twoFactorVerification     TwoFactorVerification?
  createdVideos             Video[]

  @@map("users")
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String
  p256dh    String
  auth      String
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@map("push_subscriptions")
}

model FinancialAccount {
  id          String              @id @default(cuid())
  code        String              @unique
  name        String
  type        String
  subtype     String?
  parentId    String?
  isActive    Boolean             @default(true)
  balance     Float               @default(0)
  description String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  parent      FinancialAccount?   @relation("AccountHierarchy", fields: [parentId], references: [id])
  children    FinancialAccount[]  @relation("AccountHierarchy")
  categories  FinancialCategory[]
  entryLines  JournalEntryLine[]  @relation("AccountEntries")

  @@index([type, isActive])
  @@map("financial_accounts")
}

model FinancialCategory {
  id           String              @id @default(cuid())
  name         String
  type         String
  code         String?
  accountId    String
  color        String?
  icon         String?
  isActive     Boolean             @default(true)
  description  String?
  parentId     String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  budgetItems  BudgetItem[]
  account      FinancialAccount    @relation(fields: [accountId], references: [id])
  parent       FinancialCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children     FinancialCategory[] @relation("CategoryHierarchy")
  transactions Transaction[]

  @@unique([name, type])
  @@index([type, isActive])
  @@map("financial_categories")
}

model Transaction {
  id            String            @id @default(cuid())
  transactionNo String            @unique
  type          String
  categoryId    String
  amount        Float
  description   String
  reference     String?
  date          DateTime
  dueDate       DateTime?
  status        String            @default("POSTED")
  tags          String            @default("[]")
  attachments   String            @default("[]")
  notes         String?
  createdBy     String
  approvedBy    String?
  approvedAt    DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  journalEntry  JournalEntry?
  category      FinancialCategory @relation(fields: [categoryId], references: [id])
  creator       User              @relation(fields: [createdBy], references: [id])

  @@index([type, status, date])
  @@index([categoryId])
  @@map("transactions")
}

model JournalEntry {
  id            String             @id @default(cuid())
  entryNo       String             @unique
  transactionId String?            @unique
  description   String
  date          DateTime
  reference     String?
  status        String             @default("POSTED")
  totalDebit    Float              @default(0)
  totalCredit   Float              @default(0)
  isBalanced    Boolean            @default(false)
  createdBy     String
  approvedBy    String?
  approvedAt    DateTime?
  reversedBy    String?
  reversedAt    DateTime?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  creator       User               @relation(fields: [createdBy], references: [id])
  transaction   Transaction?       @relation(fields: [transactionId], references: [id])
  entries       JournalEntryLine[]

  @@index([status, date])
  @@map("journal_entries")
}

model JournalEntryLine {
  id           String           @id @default(cuid())
  journalId    String
  accountId    String
  debitAmount  Float            @default(0)
  creditAmount Float            @default(0)
  description  String?
  lineOrder    Int              @default(0)
  createdAt    DateTime         @default(now())
  account      FinancialAccount @relation("AccountEntries", fields: [accountId], references: [id])
  journal      JournalEntry     @relation(fields: [journalId], references: [id], onDelete: Cascade)

  @@index([journalId, lineOrder])
  @@map("journal_entry_lines")
}

model Budget {
  id          String            @id @default(cuid())
  name        String
  type        String            @default("ANNUAL")
  startDate   DateTime
  endDate     DateTime
  totalBudget Float             @default(0)
  status      String            @default("DRAFT")
  description String?
  createdBy   String
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  items       BudgetItem[]
  creator     User              @relation(fields: [createdBy], references: [id])
  reports     FinancialReport[]

  @@index([status, startDate])
  @@map("budgets")
}

model BudgetItem {
  id           String            @id @default(cuid())
  budgetId     String
  categoryId   String
  budgetAmount Float
  actualAmount Float             @default(0)
  variance     Float             @default(0)
  percentage   Float             @default(0)
  notes        String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  budget       Budget            @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  category     FinancialCategory @relation(fields: [categoryId], references: [id])

  @@unique([budgetId, categoryId])
  @@map("budget_items")
}

model FinancialReport {
  id        String   @id @default(cuid())
  name      String
  type      String
  period    String
  startDate DateTime
  endDate   DateTime
  budgetId  String?
  data      String
  fileUrl   String?
  status    String   @default("GENERATED")
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  budget    Budget?  @relation(fields: [budgetId], references: [id])
  creator   User     @relation(fields: [createdBy], references: [id])

  @@index([type, period, startDate])
  @@map("financial_reports")
}

model AuditTrail {
  id        String   @id @default(cuid())
  tableName String
  recordId  String
  action    String
  oldValues String?
  newValues String?
  userId    String
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([tableName, recordId])
  @@index([userId, timestamp])
  @@map("audit_trails")
}

model Activity {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String
  date        DateTime
  location    String?
  photos      String   @default("[]")
  status      String   @default("planned")
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     User     @relation(fields: [createdBy], references: [id])

  @@map("activities")
}

model LineSettings {
  id                  String   @id @default(cuid())
  enabled             Boolean  @default(false)
  channelId           String?
  channelSecret       String?
  channelAccessToken  String?
  webhookUrl          String?
  liffId              String?
  richMenuId          String?
  richMenuEnabled     Boolean  @default(true)
  flexMessagesEnabled Boolean  @default(true)
  quickReplyEnabled   Boolean  @default(true)
  broadcastEnabled    Boolean  @default(true)
  liffEnabled         Boolean  @default(false)
  multicastEnabled    Boolean  @default(true)
  pushMessagesEnabled Boolean  @default(true)
  messagesPerMinute   Int      @default(60)
  broadcastDelay      Int      @default(500)
  welcomeMessage      String   @default("Selamat datang di LINE Official Account Pondok Imam Syafii!")
  unknownMessage      String   @default("Maaf, pesan tidak dikenali. Ketik 'menu' untuk bantuan.")
  errorMessage        String   @default("Maaf, terjadi kesalahan. Silakan coba lagi.")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("line_settings")
}

model LineUser {
  id            String   @id @default(cuid())
  userId        String   @unique
  displayName   String?
  pictureUrl    String?
  statusMessage String?
  language      String?
  isAdmin       Boolean  @default(false)
  canCRUD       Boolean  @default(false)
  lastActive    DateTime @default(now())
  messageCount  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("line_users")
}

model LineUserSession {
  id           String    @id @default(cuid())
  userId       String    @unique
  mode         String    @default("PUBLIC")
  isAdmin      Boolean   @default(false)
  permissions  String[]  @default([])
  activeFlowId String?
  flowType     String?
  flowData     Json      @default("{}")
  currentStep  Int       @default(0)
  totalSteps   Int       @default(0)
  stepHistory  String[]  @default([])
  state        Json      @default("{}")
  breadcrumb   String[]  @default([])
  waitingFor   String?
  canAbort     Boolean   @default(true)
  retryCount   Int       @default(0)
  lockedUntil  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  expiresAt    DateTime?

  @@map("line_user_sessions")
}

model LineAdmin {
  id          String   @id @default(cuid())
  lineUserId  String   @unique
  userId      String?  @unique
  permissions String[] @default(["BASIC"])
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  user        User?    @relation(fields: [userId], references: [id])

  @@map("line_admins")
}

model Teacher {
  id             String    @id @default(cuid())
  nip            String?   @unique
  name           String
  title          String?
  gender         String
  birthPlace     String?
  birthDate      DateTime?
  phone          String?
  email          String?
  address        String?
  position       String
  subjects       String    @default("[]")
  education      String?
  university     String?
  major          String?
  certifications String    @default("[]")
  employmentType String    @default("TETAP")
  joinDate       DateTime?
  status         String    @default("ACTIVE")
  institution    String
  specialization String?
  experience     Int?
  photo          String?
  bio            String?
  achievements   String    @default("[]")
  isUstadz       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  createdBy      String?
  creator        User?     @relation(fields: [createdBy], references: [id])

  @@index([institution, status])
  @@index([isUstadz, status])
  @@map("teachers")
}

model Course {
  id          String   @id @default(cuid())
  name        String
  description String
  level       String
  schedule    String
  teacher     String
  duration    String
  capacity    Int
  enrolled    Int      @default(0)
  status      String   @default("active")
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     User     @relation(fields: [createdBy], references: [id])

  @@map("courses")
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String
  url         String
  thumbnail   String?
  duration    String?
  category    String
  teacher     String
  uploadDate  DateTime
  views       Int      @default(0)
  isPublic    Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     User     @relation(fields: [createdBy], references: [id])

  @@map("videos")
}

model Ebook {
  id            String   @id @default(cuid())
  title         String
  author        String
  description   String
  category      String
  subcategory   String?
  fileUrl       String
  coverImage    String?
  fileSize      Int?
  pageCount     Int?
  language      String   @default("id")
  publisher     String?
  publishYear   String?
  isbn          String?
  tags          String   @default("[]")
  downloadCount Int      @default(0)
  viewCount     Int      @default(0)
  isFeatured    Boolean  @default(false)
  isPublic      Boolean  @default(true)
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  creator       User     @relation(fields: [createdBy], references: [id])

  @@map("ebooks")
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String

  @@map("settings")
}

model Student {
  id                  String               @id @default(cuid())
  nisn                String?              @unique
  nis                 String               @unique
  fullName            String
  nickname            String?
  birthPlace          String
  birthDate           DateTime
  gender              String
  bloodType           String?
  religion            String               @default("Islam")
  nationality         String               @default("Indonesia")
  address             String
  village             String?
  district            String?
  city                String
  province            String               @default("Jawa Timur")
  postalCode          String?
  phone               String?
  email               String?
  fatherName          String
  fatherJob           String?
  fatherPhone         String?
  fatherEducation     String?
  motherName          String
  motherJob           String?
  motherPhone         String?
  motherEducation     String?
  guardianName        String?
  guardianJob         String?
  guardianPhone       String?
  guardianRelation    String?
  institutionType     String
  grade               String?
  enrollmentDate      DateTime
  enrollmentYear      String
  previousSchool      String?
  specialNeeds        String?
  achievements        String               @default("[]")
  notes               String?
  photo               String?
  documents           String               @default("[]")
  status              String               @default("ACTIVE")
  isActive            Boolean              @default(true)
  graduationDate      DateTime?
  createdBy           String
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  registrationId      String?              @unique
  isOrphan            Boolean              @default(false)
  monthlyNeeds        Decimal?
  otaProfile          String?
  attendances         Attendance[]
  bills               Bill[]
  examResults         ExamResult[]
  grades              Grade[]
  hafalanAchievements HafalanAchievement[]
  hafalanProgress     HafalanProgress?
  hafalanRecords      HafalanRecord[]
  hafalanSessions     HafalanSession[]
  hafalanTargets      HafalanTarget[]
  otaProgram          OTAProgram?
  parentStudents      ParentStudent[]
  paymentHistory      PaymentHistory[]
  paymentReminders    PaymentReminder[]
  payments            Payment[]
  ppdbRegistrations   PPDBRegistration[]
  reportCards         ReportCard[]
  setoranSchedules    SetoranSchedule[]
  sppBillings         SPPBilling[]
  studentClasses      StudentClass[]
  creator             User                 @relation(fields: [createdBy], references: [id])
  registration        Registration?        @relation(fields: [registrationId], references: [id])

  @@index([institutionType, status])
  @@index([enrollmentYear])
  @@index([isOrphan])
  @@map("students")
}

model Alumni {
  id                 String    @id @default(cuid())
  nisn               String?
  nis                String?
  fullName           String
  nickname           String?
  birthPlace         String
  birthDate          DateTime
  gender             String
  bloodType          String?
  religion           String    @default("Islam")
  nationality        String    @default("Indonesia")
  currentAddress     String
  currentCity        String
  currentProvince    String?
  currentCountry     String    @default("Indonesia")
  phone              String?
  whatsapp           String?
  email              String?
  facebook           String?
  instagram          String?
  linkedin           String?
  fatherName         String?
  motherName         String?
  institutionType    String
  graduationYear     String
  generation         String?
  currentJob         String?
  jobPosition        String?
  company            String?
  furtherEducation   String?
  university         String?
  major              String?
  achievements       String    @default("[]")
  maritalStatus      String?
  spouseName         String?
  childrenCount      Int       @default(0)
  notes              String?
  photo              String?
  memories           String?
  message            String?
  availableForEvents Boolean   @default(true)
  lastContactDate    DateTime?
  createdBy          String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  creator            User      @relation(fields: [createdBy], references: [id])

  @@index([institutionType, graduationYear])
  @@index([generation])
  @@index([availableForEvents])
  @@map("alumni")
}

model Registration {
  id               String    @id @default(cuid())
  registrationNo   String    @unique
  fullName         String
  nickname         String?
  gender           String
  birthPlace       String
  birthDate        DateTime
  nik              String?
  nisn             String?
  address          String
  rt               String?
  rw               String?
  village          String
  district         String
  city             String
  province         String    @default("Jawa Timur")
  postalCode       String?
  level            String
  previousSchool   String?
  gradeTarget      String?
  programType      String?
  boardingType     String?
  fatherName       String
  fatherNik        String?
  fatherJob        String?
  fatherPhone      String?
  fatherEducation  String?
  fatherIncome     String?
  motherName       String
  motherNik        String?
  motherJob        String?
  motherPhone      String?
  motherEducation  String?
  motherIncome     String?
  guardianName     String?
  guardianRelation String?
  guardianPhone    String?
  guardianAddress  String?
  phoneNumber      String
  whatsapp         String
  email            String?
  bloodType        String?
  height           Int?
  weight           Int?
  specialNeeds     String?
  medicalHistory   String?
  status           String    @default("DRAFT")
  paymentStatus    String    @default("UNPAID")
  documents        String    @default("[]")
  testSchedule     DateTime?
  testVenue        String?
  testScore        String?
  testResult       String?
  ranking          Int?
  registrationFee  Decimal   @default(150000)
  paymentMethod    String?
  paymentDate      DateTime?
  paymentProof     String?
  reregStatus      String?
  reregDate        DateTime?
  reregPayment     String?
  notes            String?
  verifiedBy       String?
  verifiedAt       DateTime?
  rejectionReason  String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  submittedAt      DateTime?
  payments         Payment[]
  student          Student?

  @@index([status])
  @@index([level])
  @@index([paymentStatus])
  @@index([testResult])
  @@map("registrations")
}

model Payment {
  id                 String        @id @default(cuid())
  paymentNo          String        @unique
  billId             String?
  registrationId     String?
  studentId          String?
  amount             Decimal
  paymentType        String
  description        String?
  method             String
  channel            String?
  status             String        @default("PENDING")
  proofUrl           String?
  verifiedBy         String?
  verifiedAt         DateTime?
  externalId         String?
  transactionId      String?
  paymentUrl         String?
  vaNumber           String?
  qrString           String?
  deeplink           String?
  expiredAt          DateTime?
  paymentGatewayData String        @default("{}")
  merchantId         String?
  fraudStatus        String?
  cardType           String?
  maskedCard         String?
  approvalCode       String?
  paidAt             DateTime?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  registration       Registration? @relation(fields: [registrationId], references: [id])
  student            Student?      @relation(fields: [studentId], references: [id])

  @@index([status])
  @@index([paymentType])
  @@index([externalId])
  @@index([transactionId])
  @@map("payments")
}

model DonationCategory {
  id          String             @id @default(cuid())
  name        String             @unique
  description String?
  icon        String?
  color       String?
  isActive    Boolean            @default(true)
  sortOrder   Int                @default(0)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  campaigns   DonationCampaign[]
  donations   Donation[]

  @@map("donation_categories")
}

model DonationCampaign {
  id             String           @id @default(cuid())
  title          String
  slug           String           @unique
  description    String
  story          String?
  categoryId     String
  targetAmount   Decimal
  currentAmount  Decimal          @default(0)
  startDate      DateTime         @default(now())
  endDate        DateTime?
  mainImage      String?
  images         String           @default("[]")
  video          String?
  status         String           @default("DRAFT")
  isFeatured     Boolean          @default(false)
  isUrgent       Boolean          @default(false)
  allowAnonymous Boolean          @default(true)
  shareCount     Int              @default(0)
  createdBy      String
  approvedBy     String?
  approvedAt     DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  updates        CampaignUpdate[]
  category       DonationCategory @relation(fields: [categoryId], references: [id])
  creator        User             @relation(fields: [createdBy], references: [id])
  donations      Donation[]

  @@index([status, isFeatured])
  @@index([categoryId])
  @@index([endDate])
  @@map("donation_campaigns")
}

model CampaignUpdate {
  id         String           @id @default(cuid())
  campaignId String
  title      String
  content    String
  images     String           @default("[]")
  isPublic   Boolean          @default(true)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  campaign   DonationCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId, createdAt])
  @@map("campaign_updates")
}

model Donation {
  id             String            @id @default(cuid())
  donationNo     String            @unique
  campaignId     String?
  categoryId     String
  amount         Decimal
  message        String?
  donorName      String?
  donorEmail     String?
  donorPhone     String?
  isAnonymous    Boolean           @default(false)
  paymentMethod  String?
  paymentChannel String?
  paymentStatus  String            @default("PENDING")
  externalId     String?
  vaNumber       String?
  qrisCode       String?
  paymentUrl     String?
  expiredAt      DateTime?
  paidAt         DateTime?
  proofUrl       String?
  verifiedBy     String?
  verifiedAt     DateTime?
  certificateNo  String?
  certificateUrl String?
  source         String            @default("WEB")
  ipAddress      String?
  userAgent      String?
  referrer       String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  campaign       DonationCampaign? @relation(fields: [campaignId], references: [id])
  category       DonationCategory  @relation(fields: [categoryId], references: [id])

  @@index([paymentStatus, createdAt])
  @@index([campaignId])
  @@index([categoryId])
  @@index([donorEmail])
  @@map("donations")
}

model ZakatCalculation {
  id              String   @id @default(cuid())
  calculationType String
  inputs          String
  zakatAmount     Decimal
  nisabAmount     Decimal?
  donorName       String?
  donorEmail      String?
  donorPhone      String?
  donationId      String?
  createdAt       DateTime @default(now())

  @@index([calculationType, createdAt])
  @@map("zakat_calculations")
}

model DonorProfile {
  id                  String    @id @default(cuid())
  email               String    @unique
  name                String
  phone               String?
  preferredCategories String    @default("[]")
  allowMarketing      Boolean   @default(true)
  allowNewsletter     Boolean   @default(true)
  totalDonated        Decimal   @default(0)
  donationCount       Int       @default(0)
  lastDonationAt      DateTime?
  isVerified          Boolean   @default(false)
  verificationToken   String?
  verifiedAt          DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([email])
  @@index([isVerified])
  @@map("donor_profiles")
}

model ProductCategory {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  icon        String?
  color       String?
  isActive    Boolean           @default(true)
  parentId    String?
  sortOrder   Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  parent      ProductCategory?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    ProductCategory[] @relation("CategoryHierarchy")
  products    Product[]

  @@index([isActive, sortOrder])
  @@map("product_categories")
}

model Product {
  id                    String                 @id @default(cuid())
  name                  String
  code                  String                 @unique
  description           String?
  categoryId            String
  price                 Decimal
  cost                  Decimal                @default(0)
  stock                 Int                    @default(0)
  minStock              Int                    @default(5)
  unit                  String                 @default("pcs")
  image                 String?
  isActive              Boolean                @default(true)
  brand                 String?
  supplier              String?
  location              String                 @default("UMUM")
  tags                  String                 @default("[]")
  notes                 String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  inventoryRecords      Inventory[]
  inventoryTransactions InventoryTransaction[]
  category              ProductCategory        @relation(fields: [categoryId], references: [id])
  purchaseItems         PurchaseOrderItem[]
  saleItems             SaleItem[]

  @@index([code])
  @@index([categoryId, isActive])
  @@index([location, isActive])
  @@index([stock])
  @@map("products")
}

model Supplier {
  id             String          @id @default(cuid())
  name           String
  code           String?         @unique
  contact        String?
  address        String?
  phone          String?
  email          String?
  whatsapp       String?
  taxId          String?
  bankAccount    String?
  paymentTerms   String?
  isActive       Boolean         @default(true)
  rating         Int             @default(5)
  notes          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  purchaseOrders PurchaseOrder[]

  @@index([isActive])
  @@map("suppliers")
}

model Inventory {
  id          String    @id @default(cuid())
  productId   String
  quantity    Int
  location    String
  unitCost    Decimal   @default(0)
  batchNo     String?
  expiryDate  DateTime?
  lastUpdated DateTime  @default(now())
  updatedBy   String?
  notes       String?
  product     Product   @relation(fields: [productId], references: [id])

  @@unique([productId, location, batchNo])
  @@index([productId, location])
  @@index([expiryDate])
  @@map("inventory")
}

model InventoryTransaction {
  id          String   @id @default(cuid())
  productId   String
  type        String
  quantity    Int
  location    String
  unitCost    Decimal  @default(0)
  totalCost   Decimal  @default(0)
  reference   String?
  referenceId String?
  batchNo     String?
  reason      String?
  notes       String?
  createdAt   DateTime @default(now())
  createdBy   String?
  product     Product  @relation(fields: [productId], references: [id])

  @@index([productId, type, createdAt])
  @@index([type, createdAt])
  @@index([referenceId])
  @@map("inventory_transactions")
}

model PurchaseOrder {
  id             String              @id @default(cuid())
  orderNo        String              @unique
  supplierId     String
  status         String              @default("DRAFT")
  orderDate      DateTime            @default(now())
  expectedDate   DateTime?
  receivedDate   DateTime?
  subtotal       Decimal             @default(0)
  taxAmount      Decimal             @default(0)
  discountAmount Decimal             @default(0)
  shippingCost   Decimal             @default(0)
  totalAmount    Decimal             @default(0)
  paymentStatus  String              @default("UNPAID")
  paidAmount     Decimal             @default(0)
  notes          String?
  terms          String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  createdBy      String
  items          PurchaseOrderItem[]
  creator        User                @relation(fields: [createdBy], references: [id])
  supplier       Supplier            @relation(fields: [supplierId], references: [id])

  @@index([status, orderDate])
  @@index([supplierId])
  @@map("purchase_orders")
}

model PurchaseOrderItem {
  id              String        @id @default(cuid())
  purchaseOrderId String
  productId       String
  quantity        Int
  unitCost        Decimal
  totalCost       Decimal
  receivedQty     Int           @default(0)
  remainingQty    Int
  notes           String?
  createdAt       DateTime      @default(now())
  product         Product       @relation(fields: [productId], references: [id])
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)

  @@unique([purchaseOrderId, productId])
  @@map("purchase_order_items")
}

model Sale {
  id               String     @id @default(cuid())
  saleNo           String     @unique
  customerName     String?
  customerPhone    String?
  customerEmail    String?
  location         String     @default("KOPERASI")
  saleDate         DateTime   @default(now())
  subtotal         Decimal
  taxAmount        Decimal    @default(0)
  discountAmount   Decimal    @default(0)
  totalAmount      Decimal
  paymentMethod    String     @default("CASH")
  paidAmount       Decimal
  changeAmount     Decimal    @default(0)
  paymentReference String?
  cashier          String
  status           String     @default("COMPLETED")
  notes            String?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  items            SaleItem[]

  @@index([saleDate, location])
  @@index([status])
  @@index([cashier])
  @@map("sales")
}

model SaleItem {
  id             String   @id @default(cuid())
  saleId         String
  productId      String
  quantity       Int
  unitPrice      Decimal
  unitCost       Decimal
  subtotal       Decimal
  discountAmount Decimal  @default(0)
  finalAmount    Decimal
  createdAt      DateTime @default(now())
  product        Product  @relation(fields: [productId], references: [id])
  sale           Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)

  @@unique([saleId, productId])
  @@map("sale_items")
}

model AcademicYear {
  id             String         @id @default(cuid())
  name           String         @unique
  startDate      DateTime
  endDate        DateTime
  isActive       Boolean        @default(false)
  description    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  classes        Class[]
  semesters      Semester[]
  studentClasses StudentClass[]

  @@index([isActive])
  @@index([startDate, endDate])
  @@map("academic_years")
}

model Semester {
  id              String           @id @default(cuid())
  academicYearId  String
  name            String
  shortName       String?
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean          @default(false)
  gradingDeadline DateTime?
  reportDeadline  DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  attendances     Attendance[]
  exams           Exam[]
  grades          Grade[]
  reportCards     ReportCard[]
  academicYear    AcademicYear     @relation(fields: [academicYearId], references: [id])
  sppBillings     SPPBilling[]
  teacherSubjects TeacherSubject[]

  @@unique([academicYearId, name])
  @@index([isActive])
  @@index([startDate, endDate])
  @@map("semesters")
}

model Class {
  id              String           @id @default(cuid())
  name            String
  grade           String
  section         String?
  academicYearId  String
  teacherId       String?
  capacity        Int              @default(30)
  room            String?
  level           String
  program         String?
  description     String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  attendances     Attendance[]
  academicYear    AcademicYear     @relation(fields: [academicYearId], references: [id])
  teacher         User?            @relation("ClassTeacher", fields: [teacherId], references: [id])
  //teacher         Teacher?         @relation(fields: [teacherId], references: [id])
  exams           Exam[]
  reportCards     ReportCard[]     @relation("ReportCardClass")
  schedules       Schedule[]
  sppBillings     SPPBilling[]
  studentClasses  StudentClass[]
  teacherSubjects TeacherSubject[]

  @@unique([academicYearId, name])
  @@index([grade, level])
  @@index([isActive])
  @@map("classes")
}

model Subject {
  id                 String              @id @default(cuid())
  code               String              @unique
  name               String
  nameArabic         String?
  description        String?
  credits            Int                 @default(2)
  type               String              @default("WAJIB")
  category           String              @default("UMUM")
  level              String
  minGrade           String?
  maxGrade           String?
  isActive           Boolean             @default(true)
  sortOrder          Int                 @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  curriculumSubjects CurriculumSubject[]
  exams              Exam[]
  grades             Grade[]
  schedules          Schedule[]
  teacherSubjects    TeacherSubject[]

  @@index([level, category])
  @@index([isActive])
  @@map("subjects")
}

model TeacherSubject {
  id         String   @id @default(cuid())
  teacherId  String
  subjectId  String
  classId    String
  semesterId String
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  class      Class    @relation(fields: [classId], references: [id])
  semester   Semester @relation(fields: [semesterId], references: [id])
  subject    Subject  @relation(fields: [subjectId], references: [id])
  teacher    User     @relation("TeacherSubject", fields: [teacherId], references: [id])

  @@unique([teacherId, subjectId, classId, semesterId])
  @@index([teacherId, semesterId])
  @@index([subjectId, classId])
  @@map("teacher_subjects")
}

model StudentClass {
  id             String       @id @default(cuid())
  studentId      String
  classId        String
  academicYearId String
  rollNumber     String?
  status         String       @default("ACTIVE")
  joinDate       DateTime     @default(now())
  leaveDate      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  academicYear   AcademicYear @relation(fields: [academicYearId], references: [id])
  class          Class        @relation(fields: [classId], references: [id])
  student        Student      @relation(fields: [studentId], references: [id])

  @@unique([studentId, classId, academicYearId])
  @@index([classId, status])
  @@index([academicYearId])
  @@map("student_classes")
}

model Curriculum {
  id          String              @id @default(cuid())
  name        String
  code        String              @unique
  level       String
  description String?
  isActive    Boolean             @default(true)
  validFrom   DateTime
  validUntil  DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  subjects    CurriculumSubject[]

  @@index([level, isActive])
  @@map("curriculums")
}

model CurriculumSubject {
  id           String     @id @default(cuid())
  curriculumId String
  subjectId    String
  grade        String
  semester     Int?
  credits      Int        @default(2)
  isRequired   Boolean    @default(true)
  minScore     Int        @default(60)
  sortOrder    Int        @default(0)
  createdAt    DateTime   @default(now())
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id])
  subject      Subject    @relation(fields: [subjectId], references: [id])

  @@unique([curriculumId, subjectId, grade])
  @@index([curriculumId, grade])
  @@map("curriculum_subjects")
}

model Grade {
  id            String    @id @default(cuid())
  studentId     String
  subjectId     String
  semesterId    String
  classId       String?
  midterm       Decimal?
  final         Decimal?
  assignment    Decimal?
  quiz          Decimal?
  participation Decimal?
  project       Decimal?
  daily         Decimal?
  total         Decimal?
  grade         String?
  point         Decimal?
  akhlak        String?
  quranMemory   String?
  notes         String?
  isLocked      Boolean   @default(false)
  enteredBy     String?
  enteredAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  semester      Semester  @relation(fields: [semesterId], references: [id])
  student       Student   @relation(fields: [studentId], references: [id])
  subject       Subject   @relation(fields: [subjectId], references: [id])

  @@unique([studentId, subjectId, semesterId])
  @@index([semesterId, subjectId])
  @@index([studentId, semesterId])
  @@map("grades")
}

model Attendance {
  id         String    @id @default(cuid())
  studentId  String
  classId    String
  semesterId String
  date       DateTime  @db.Date
  status     String
  timeIn     DateTime?
  notes      String?
  markedBy   String
  markedAt   DateTime  @default(now())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  class      Class     @relation(fields: [classId], references: [id])
  marker     User      @relation("AttendanceMarker", fields: [markedBy], references: [id])
  semester   Semester  @relation(fields: [semesterId], references: [id])
  student    Student   @relation(fields: [studentId], references: [id])

  @@unique([studentId, classId, date])
  @@index([date, classId])
  @@index([studentId, semesterId])
  @@map("attendances")
}

model ReportCard {
  id                   String    @id @default(cuid())
  studentId            String
  semesterId           String
  classId              String
  totalScore           Decimal?
  rank                 Int?
  totalSubjects        Int       @default(0)
  totalDays            Int       @default(0)
  presentDays          Int       @default(0)
  sickDays             Int       @default(0)
  permittedDays        Int       @default(0)
  absentDays           Int       @default(0)
  lateDays             Int       @default(0)
  attendancePercentage Decimal?
  behavior             String?
  personality          String    @default("{}")
  extracurricular      String    @default("[]")
  achievements         String    @default("[]")
  notes                String?
  recommendations      String?
  parentNotes          String?
  generatedAt          DateTime?
  generatedBy          String?
  printedAt            DateTime?
  signedAt             DateTime?
  signedBy             String?
  pdfUrl               String?
  status               String    @default("DRAFT")
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  class                Class     @relation("ReportCardClass", fields: [classId], references: [id])
  semester             Semester  @relation(fields: [semesterId], references: [id])
  student              Student   @relation(fields: [studentId], references: [id])

  @@unique([studentId, semesterId])
  @@index([semesterId, status])
  @@map("report_cards")
}

model Schedule {
  id        String   @id @default(cuid())
  classId   String
  subjectId String
  teacherId String
  day       String
  startTime String
  endTime   String
  room      String?
  period    Int?
  isActive  Boolean  @default(true)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  class     Class    @relation(fields: [classId], references: [id])
  subject   Subject  @relation(fields: [subjectId], references: [id])
  teacher   User     @relation("ScheduleTeacher", fields: [teacherId], references: [id])

  @@unique([classId, day, startTime])
  @@index([teacherId, day])
  @@index([classId, day])
  @@map("schedules")
}

model Exam {
  id           String       @id @default(cuid())
  name         String
  code         String?
  type         String
  subjectId    String
  classId      String
  semesterId   String
  teacherId    String
  date         DateTime
  startTime    String
  endTime      String
  duration     Int
  room         String?
  maxScore     Decimal      @default(100)
  minScore     Decimal      @default(0)
  passingScore Decimal      @default(60)
  instructions String?
  materials    String       @default("[]")
  status       String       @default("SCHEDULED")
  isPublished  Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  results      ExamResult[]
  class        Class        @relation(fields: [classId], references: [id])
  semester     Semester     @relation(fields: [semesterId], references: [id])
  subject      Subject      @relation(fields: [subjectId], references: [id])
  teacher      User         @relation("ExamTeacher", fields: [teacherId], references: [id])

  @@index([date, classId])
  @@index([subjectId, semesterId])
  @@map("exams")
}

model ExamResult {
  id        String    @id @default(cuid())
  examId    String
  studentId String
  score     Decimal
  grade     String?
  point     Decimal?
  status    String    @default("COMPLETED")
  notes     String?
  enteredBy String?
  enteredAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  exam      Exam      @relation(fields: [examId], references: [id])
  student   Student   @relation(fields: [studentId], references: [id])

  @@unique([examId, studentId])
  @@index([examId])
  @@index([studentId])
  @@map("exam_results")
}

model ParentAccount {
  id                   String          @id @default(cuid())
  userId               String          @unique
  phoneNumber          String?
  whatsapp             String?
  emergencyContact     String?
  notificationSettings String          @default("{\"grades\": true, \"attendance\": true, \"payments\": true, \"announcements\": true, \"messages\": true, \"pushNotifications\": true, \"emailNotifications\": true}")
  preferredLanguage    String          @default("id")
  timezone             String          @default("Asia/Jakarta")
  isActive             Boolean         @default(true)
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  user                 User            @relation(fields: [userId], references: [id])
  parentStudents       ParentStudent[]

  @@index([userId])
  @@map("parent_accounts")
}

model ParentStudent {
  id                 String        @id @default(cuid())
  parentId           String
  studentId          String
  relationship       String
  isPrimary          Boolean       @default(false)
  canViewGrades      Boolean       @default(true)
  canViewAttendance  Boolean       @default(true)
  canViewPayments    Boolean       @default(true)
  canReceiveMessages Boolean       @default(true)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  parent             ParentAccount @relation(fields: [parentId], references: [id], onDelete: Cascade)
  student            Student       @relation(fields: [studentId], references: [id])

  @@unique([parentId, studentId])
  @@index([studentId])
  @@map("parent_students")
}

model Announcement {
  id             String    @id @default(cuid())
  title          String
  content        String
  summary        String?
  targetAudience String    @default("ALL")
  targetClasses  String    @default("[]")
  targetGrades   String    @default("[]")
  priority       String    @default("NORMAL")
  category       String    @default("GENERAL")
  tags           String    @default("[]")
  attachments    String    @default("[]")
  featuredImage  String?
  status         String    @default("DRAFT")
  publishDate    DateTime  @default(now())
  expiryDate     DateTime?
  isPinned       Boolean   @default(false)
  viewCount      Int       @default(0)
  createdBy      String
  approvedBy     String?
  approvedAt     DateTime?
  publishedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([status, publishDate])
  @@index([targetAudience, priority])
  @@index([category, createdAt])
  @@index([expiryDate])
  @@map("announcements")
}

model Message {
  id              String    @id @default(cuid())
  senderId        String
  receiverId      String
  subject         String
  content         String
  parentMessageId String?
  threadId        String?
  type            String    @default("NORMAL")
  priority        String    @default("NORMAL")
  attachments     String    @default("[]")
  status          String    @default("SENT")
  isRead          Boolean   @default(false)
  readAt          DateTime?
  repliedAt       DateTime?
  isAutoReply     Boolean   @default(false)
  scheduledFor    DateTime?
  sentAt          DateTime  @default(now())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  parentMessage   Message?  @relation("MessageThread", fields: [parentMessageId], references: [id])
  replies         Message[] @relation("MessageThread")
  receiver        User      @relation("MessageReceiver", fields: [receiverId], references: [id])
  sender          User      @relation("MessageSender", fields: [senderId], references: [id])

  @@index([senderId, sentAt])
  @@index([receiverId, isRead])
  @@index([threadId])
  @@index([parentMessageId])
  @@index([status, priority])
  @@map("messages")
}

model Notification {
  id           String    @id @default(cuid())
  userId       String
  type         String
  title        String
  message      String
  data         String    @default("{}")
  actionUrl    String?
  actionText   String?
  isRead       Boolean   @default(false)
  readAt       DateTime?
  channels     String    @default("[\"in_app\"]")
  emailSent    Boolean   @default(false)
  emailSentAt  DateTime?
  pushSent     Boolean   @default(false)
  pushSentAt   DateTime?
  smsSent      Boolean   @default(false)
  smsSentAt    DateTime?
  scheduledFor DateTime?
  expiresAt    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  user         User      @relation(fields: [userId], references: [id])

  @@index([userId, isRead])
  @@index([type, createdAt])
  @@index([scheduledFor])
  @@index([expiresAt])
  @@map("notifications")
}

model QuranSurah {
  id                  String          @id @default(cuid())
  number              Int             @unique
  name                String
  nameArabic          String
  nameTransliteration String?
  totalAyat           Int
  juz                 Int
  page                Int?
  type                String
  revelation          Int?
  meaningId           String?
  meaningAr           String?
  isActive            Boolean         @default(true)
  sortOrder           Int             @default(0)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  hafalanRecords      HafalanRecord[]
  hafalanTargets      HafalanTarget[]

  @@index([juz, number])
  @@index([type])
  @@map("quran_surahs")
}

model HafalanRecord {
  id             String     @id @default(cuid())
  studentId      String
  surahNumber    Int
  startAyat      Int        @default(1)
  endAyat        Int
  status         String
  quality        String     @default("B")
  teacherId      String
  date           DateTime   @default(now())
  fluency        String?
  tajweed        String?
  makharijul     String?
  voiceNoteUrl   String?
  notes          String?
  corrections    String?
  duration       Int?
  method         String     @default("INDIVIDUAL")
  previousRecord String?
  nextTarget     String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  student        Student    @relation(fields: [studentId], references: [id])
  surah          QuranSurah @relation(fields: [surahNumber], references: [number])
  teacher        User       @relation("HafalanTeacher", fields: [teacherId], references: [id])

  @@index([studentId, date])
  @@index([surahNumber, status])
  @@index([teacherId, date])
  @@index([status, quality])
  @@map("hafalan_records")
}

model HafalanProgress {
  id               String    @id @default(cuid())
  studentId        String    @unique
  totalSurah       Int       @default(0)
  totalAyat        Int       @default(0)
  totalJuz         Decimal   @default(0)
  currentSurah     Int?
  currentAyat      Int       @default(1)
  currentTarget    String?
  level            String    @default("PEMULA")
  badge            String    @default("[]")
  juz30Progress    Decimal   @default(0)
  overallProgress  Decimal   @default(0)
  lastSetoranDate  DateTime?
  lastMurajaahDate DateTime?
  lastUpdated      DateTime  @default(now())
  currentStreak    Int       @default(0)
  longestStreak    Int       @default(0)
  totalSessions    Int       @default(0)
  avgQuality       Decimal   @default(0)
  avgFluency       Decimal   @default(0)
  avgTajweed       Decimal   @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  student          Student   @relation(fields: [studentId], references: [id])

  @@index([level])
  @@index([totalSurah, totalAyat])
  @@map("hafalan_progress")
}

model SetoranSchedule {
  id              String    @id @default(cuid())
  studentId       String
  teacherId       String
  dayOfWeek       String
  time            String
  type            String    @default("SETORAN_BARU")
  duration        Int       @default(15)
  location        String?
  maxStudents     Int       @default(1)
  isActive        Boolean   @default(true)
  startDate       DateTime  @default(now())
  endDate         DateTime?
  isRecurring     Boolean   @default(true)
  frequency       String    @default("WEEKLY")
  reminderMinutes Int       @default(60)
  notifyParent    Boolean   @default(true)
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  student         Student   @relation(fields: [studentId], references: [id])
  teacher         User      @relation("SetoranTeacher", fields: [teacherId], references: [id])

  @@unique([studentId, teacherId, dayOfWeek, time])
  @@index([teacherId, dayOfWeek])
  @@index([dayOfWeek, time])
  @@map("setoran_schedules")
}

model HafalanTarget {
  id             String     @id @default(cuid())
  studentId      String
  targetSurah    Int
  startAyat      Int        @default(1)
  endAyat        Int?
  targetDate     DateTime
  priority       String     @default("MEDIUM")
  difficulty     String     @default("MEDIUM")
  estimatedDays  Int?
  status         String     @default("ACTIVE")
  progress       Decimal    @default(0)
  startedAt      DateTime?
  completedAt    DateTime?
  reward         String?
  motivation     String?
  parentInformed Boolean    @default(false)
  createdBy      String
  approvedBy     String?
  notes          String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  creator        User       @relation("HafalanTargetCreator", fields: [createdBy], references: [id])
  student        Student    @relation(fields: [studentId], references: [id])
  surah          QuranSurah @relation(fields: [targetSurah], references: [number])

  @@index([studentId, status])
  @@index([targetDate, status])
  @@index([createdBy])
  @@map("hafalan_targets")
}

model HafalanAchievement {
  id          String    @id @default(cuid())
  studentId   String
  type        String
  title       String
  description String
  data        String    @default("{}")
  level       String    @default("BRONZE")
  points      Int       @default(0)
  icon        String?
  color       String    @default("#10B981")
  badge       String?
  verifiedBy  String?
  verifiedAt  DateTime?
  isPublic    Boolean   @default(true)
  celebrated  Boolean   @default(false)
  shareCount  Int       @default(0)
  earnedAt    DateTime  @default(now())
  createdAt   DateTime  @default(now())
  student     Student   @relation(fields: [studentId], references: [id])

  @@index([studentId, type])
  @@index([earnedAt])
  @@index([level, points])
  @@map("hafalan_achievements")
}

model HafalanSession {
  id             String   @id @default(cuid())
  studentId      String
  teacherId      String
  sessionDate    DateTime @default(now())
  type           String
  method         String   @default("INDIVIDUAL")
  duration       Int
  location       String   @default("KELAS")
  atmosphere     String   @default("FORMAL")
  content        String
  totalAyat      Int      @default(0)
  overallQuality String
  overallFluency String
  improvements   String?
  challenges     String?
  homework       String?
  nextTarget     String?
  reminderNote   String?
  studentMood    String   @default("NORMAL")
  engagement     String   @default("GOOD")
  confidence     String   @default("MEDIUM")
  reportSent     Boolean  @default(false)
  parentFeedback String?
  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  student        Student  @relation(fields: [studentId], references: [id])
  teacher        User     @relation("HafalanSessionTeacher", fields: [teacherId], references: [id])

  @@index([studentId, sessionDate])
  @@index([teacherId, sessionDate])
  @@index([type, sessionDate])
  @@map("hafalan_sessions")
}

model BillType {
  id                       String   @id @default(cuid())
  name                     String   @unique
  category                 String
  description              String?
  defaultAmount            Decimal?
  isRecurring              Boolean  @default(false)
  frequency                String?
  priceByGrade             String   @default("{}")
  dueDayOfMonth            Int?
  gracePeriodDays          Int      @default(7)
  latePenaltyType          String   @default("NONE")
  latePenaltyAmount        Decimal  @default(0)
  maxPenalty               Decimal?
  allowSiblingDiscount     Boolean  @default(false)
  siblingDiscountPercent   Decimal  @default(0)
  allowScholarshipDiscount Boolean  @default(false)
  isActive                 Boolean  @default(true)
  sortOrder                Int      @default(0)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  bills                    Bill[]

  @@index([category, isActive])
  @@index([isRecurring])
  @@map("bill_types")
}

model Bill {
  id               String            @id @default(cuid())
  billNo           String            @unique
  studentId        String
  billTypeId       String
  amount           Decimal
  originalAmount   Decimal
  period           String
  dueDate          DateTime
  status           String            @default("OUTSTANDING")
  paidAmount       Decimal           @default(0)
  remainingAmount  Decimal
  discounts        String            @default("[]")
  totalDiscount    Decimal           @default(0)
  penalties        String            @default("[]")
  totalPenalty     Decimal           @default(0)
  isOverdue        Boolean           @default(false)
  daysPastDue      Int               @default(0)
  firstOverdueDate DateTime?
  lastReminderSent DateTime?
  reminderCount    Int               @default(0)
  notes            String?
  metadata         String            @default("{}")
  generatedAt      DateTime          @default(now())
  generatedBy      String?
  cancelledAt      DateTime?
  cancelledBy      String?
  cancelReason     String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  payments         BillPayment[]
  billType         BillType          @relation(fields: [billTypeId], references: [id])
  student          Student           @relation(fields: [studentId], references: [id])
  paymentHistory   PaymentHistory[]
  paymentReminders PaymentReminder[]

  @@index([studentId, status])
  @@index([billTypeId, period])
  @@index([status, dueDate])
  @@index([isOverdue, dueDate])
  @@index([period, billTypeId])
  @@map("bills")
}

model BillPayment {
  id                 String           @id @default(cuid())
  paymentNo          String           @unique
  billId             String
  amount             Decimal
  paymentDate        DateTime         @default(now())
  method             String
  channel            String?
  reference          String?
  proofUrl           String?
  verificationStatus String           @default("PENDING")
  verifiedBy         String?
  verifiedAt         DateTime?
  rejectionReason    String?
  externalId         String?
  gatewayResponse    String           @default("{}")
  reconciledAt       DateTime?
  reconciledBy       String?
  notes              String?
  ipAddress          String?
  userAgent          String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  bill               Bill             @relation(fields: [billId], references: [id])
  history            PaymentHistory[]

  @@index([billId, paymentDate])
  @@index([method, verificationStatus])
  @@index([paymentDate])
  @@index([verificationStatus])
  @@map("bill_payments")
}

model PaymentHistory {
  id             String       @id @default(cuid())
  billId         String
  paymentId      String?
  studentId      String
  action         String
  description    String
  previousAmount Decimal?
  newAmount      Decimal?
  changeAmount   Decimal?
  performedBy    String?
  metadata       String       @default("{}")
  createdAt      DateTime     @default(now())
  bill           Bill         @relation(fields: [billId], references: [id])
  payment        BillPayment? @relation(fields: [paymentId], references: [id])
  student        Student      @relation(fields: [studentId], references: [id])

  @@index([billId, createdAt])
  @@index([studentId, createdAt])
  @@index([action, createdAt])
  @@map("payment_history")
}

model BillingSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  category    String   @default("GENERAL")
  description String?
  dataType    String   @default("STRING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
  @@map("billing_settings")
}

model PaymentReminder {
  id               String    @id @default(cuid())
  billId           String
  studentId        String
  type             String
  status           String    @default("PENDING")
  subject          String?
  message          String
  scheduledAt      DateTime
  sentAt           DateTime?
  deliveredAt      DateTime?
  readAt           DateTime?
  respondedAt      DateTime?
  response         String?
  recipientEmail   String?
  recipientPhone   String?
  deliveryAttempts Int       @default(0)
  maxAttempts      Int       @default(3)
  lastAttemptAt    DateTime?
  failureReason    String?
  templateUsed     String?
  metadata         String    @default("{}")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  bill             Bill      @relation(fields: [billId], references: [id])
  student          Student   @relation(fields: [studentId], references: [id])

  @@index([billId, scheduledAt])
  @@index([studentId, type])
  @@index([status, scheduledAt])
  @@index([type, status])
  @@map("payment_reminders")
}

model BillingReport {
  id           String    @id @default(cuid())
  name         String
  type         String
  parameters   String    @default("{}")
  startDate    DateTime
  endDate      DateTime
  data         String?
  summary      String    @default("{}")
  pdfUrl       String?
  excelUrl     String?
  status       String    @default("GENERATING")
  progress     Int       @default(0)
  generatedBy  String
  generatedAt  DateTime  @default(now())
  completedAt  DateTime?
  errorMessage String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@index([type, startDate])
  @@index([generatedBy, createdAt])
  @@index([status])
  @@map("billing_reports")
}

model OTAProgram {
  id              String       @id @default(cuid())
  studentId       String       @unique
  monthlyTarget   Decimal
  currentMonth    String
  totalCollected  Decimal      @default(0)
  isActive        Boolean      @default(true)
  programStart    DateTime     @default(now())
  lastUpdate      DateTime     @default(now())
  monthlyProgress Decimal      @default(0)
  monthsCompleted Int          @default(0)
  displayOrder    Int          @default(0)
  showProgress    Boolean      @default(true)
  adminNotes      String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  student         Student      @relation(fields: [studentId], references: [id])
  sponsors        OTASponsor[]

  @@index([isActive, displayOrder])
  @@index([currentMonth])
  @@index([monthlyProgress])
  @@map("ota_programs")
}

model OTASponsor {
  id                 String     @id @default(cuid())
  programId          String
  donorName          String
  donorEmail         String?
  donorPhone         String?
  publicName         String     @default("Hamba Allah")
  amount             Decimal
  month              String
  isPaid             Boolean    @default(false)
  paymentMethod      String?
  paymentProof       String?
  paymentDate        DateTime?
  verifiedBy         String?
  verifiedAt         DateTime?
  externalId         String?
  paymentStatus      String     @default("PENDING")
  donationType       String     @default("REGULAR")
  isRecurring        Boolean    @default(false)
  allowPublicDisplay Boolean    @default(true)
  allowContact       Boolean    @default(false)
  donorMessage       String?
  adminNotes         String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  program            OTAProgram @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@index([programId, month])
  @@index([donorEmail])
  @@index([isPaid, verifiedAt])
  @@index([paymentStatus])
  @@index([month, isPaid])
  @@map("ota_sponsors")
}

model OTAReport {
  id                 String    @id @default(cuid())
  month              String
  year               String
  reportType         String
  totalTarget        Decimal
  totalCollected     Decimal
  totalDistributed   Decimal
  totalPending       Decimal   @default(0)
  totalOrphans       Int
  fullyFundedCount   Int       @default(0)
  partialFundedCount Int       @default(0)
  unfundedCount      Int       @default(0)
  totalDonors        Int       @default(0)
  newDonors          Int       @default(0)
  recurringDonors    Int       @default(0)
  details            String    @default("{}")
  carryOverAmount    Decimal   @default(0)
  surplusAmount      Decimal   @default(0)
  status             String    @default("DRAFT")
  generatedBy        String
  approvedBy         String?
  approvedAt         DateTime?
  distributedAt      DateTime?
  distributedBy      String?
  distributionNotes  String?
  reportFileUrl      String?
  proofFileUrl       String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([month, reportType])
  @@index([year, month])
  @@index([status, createdAt])
  @@index([reportType])
  @@map("ota_reports")
}

model PPDBRegistration {
  id                String         @id @default(cuid())
  registrationNo    String         @unique
  level             String
  academicYear      String
  fullName          String
  nickname          String?
  birthPlace        String
  birthDate         DateTime
  gender            String
  bloodType         String?
  religion          String         @default("ISLAM")
  nationality       String         @default("INDONESIA")
  nik               String?
  nisn              String?
  birthCertNo       String?
  familyCardNo      String?
  phone             String?
  email             String?
  address           String
  rt                String?
  rw                String?
  village           String
  district          String
  city              String
  province          String
  postalCode        String?
  previousSchool    String?
  previousGrade     String?
  previousNISN      String?
  graduationYear    Int?
  fatherName        String
  fatherNIK         String?
  fatherBirth       DateTime?
  fatherEducation   String?
  fatherOccupation  String?
  fatherPhone       String?
  fatherIncome      Decimal?
  motherName        String
  motherNIK         String?
  motherBirth       DateTime?
  motherEducation   String?
  motherOccupation  String?
  motherPhone       String?
  motherIncome      Decimal?
  guardianName      String?
  guardianNIK       String?
  guardianRelation  String?
  guardianPhone     String?
  guardianAddress   String?
  hasSpecialNeeds   Boolean        @default(false)
  specialNeeds      String?
  healthConditions  String?
  allergies         String?
  documents         String         @default("[]")
  photoUrl          String?
  birthCertUrl      String?
  familyCardUrl     String?
  transcriptUrl     String?
  status            String         @default("DRAFT")
  testSchedule      DateTime?
  testScore         Decimal?
  testNotes         String?
  interviewSchedule DateTime?
  interviewScore    Decimal?
  interviewNotes    String?
  acceptedAt        DateTime?
  acceptedBy        String?
  acceptanceNo      String?
  enrolledAt        DateTime?
  studentId         String?
  registrationFee   Decimal?
  paymentStatus     String         @default("UNPAID")
  paymentProof      String?
  internalNotes     String?
  publicNotes       String?
  submittedAt       DateTime?
  reviewedBy        String?
  reviewedAt        DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  activities        PPDBActivity[]
  student           Student?       @relation(fields: [studentId], references: [id])

  @@index([level, academicYear, status])
  @@index([registrationNo])
  @@index([status, createdAt])
  @@map("ppdb_registrations")
}

model PPDBActivity {
  id             String           @id @default(cuid())
  registrationId String
  activity       String
  description    String
  metadata       String?
  performedBy    String?
  performedAt    DateTime         @default(now())
  registration   PPDBRegistration @relation(fields: [registrationId], references: [id], onDelete: Cascade)

  @@index([registrationId, performedAt])
  @@map("ppdb_activities")
}

model PPDBSettings {
  id                    String   @id @default(cuid())
  academicYear          String   @unique
  openDate              DateTime
  closeDate             DateTime
  quotaTK               Int      @default(30)
  quotaSD               Int      @default(60)
  quotaSMP              Int      @default(40)
  quotaPondok           Int      @default(50)
  registrationFeeTK     Decimal  @default(100000)
  registrationFeeSD     Decimal  @default(150000)
  registrationFeeSMP    Decimal  @default(200000)
  registrationFeePondok Decimal  @default(250000)
  testEnabled           Boolean  @default(true)
  testPassScore         Decimal  @default(60)
  interviewEnabled      Boolean  @default(true)
  interviewPassScore    Decimal  @default(70)
  requiredDocs          String   @default("[]")
  acceptanceTemplate    String?
  rejectionTemplate     String?
  lastRegistrationNo    Int      @default(0)
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("ppdb_settings")
}

model SPPBilling {
  id             String        @id @default(cuid())
  billNo         String        @unique
  studentId      String
  classId        String
  semesterId     String
  month          Int
  year           Int
  sppAmount      Decimal
  booksFee       Decimal?
  uniformFee     Decimal?
  activityFee    Decimal?
  examFee        Decimal?
  otherFees      String        @default("[]")
  subtotal       Decimal
  discount       Decimal       @default(0)
  discountType   String?
  discountReason String?
  totalAmount    Decimal
  status         String        @default("UNPAID")
  paidAmount     Decimal       @default(0)
  dueDate        DateTime
  isOverdue      Boolean       @default(false)
  overdueDays    Int           @default(0)
  lateFee        Decimal       @default(0)
  paidAt         DateTime?
  paymentMethod  String?
  paymentRef     String?
  notes          String?
  generatedAt    DateTime      @default(now())
  generatedBy    String?
  cancelledAt    DateTime?
  cancelledBy    String?
  cancelReason   String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  class          Class         @relation(fields: [classId], references: [id])
  semester       Semester      @relation(fields: [semesterId], references: [id])
  student        Student       @relation(fields: [studentId], references: [id])
  payments       SPPPayment[]
  reminders      SPPReminder[]

  @@unique([studentId, month, year])
  @@index([status, dueDate])
  @@index([studentId, year, month])
  @@index([classId, status])
  @@map("spp_billings")
}

model SPPPayment {
  id            String     @id @default(cuid())
  paymentNo     String     @unique
  billingId     String
  amount        Decimal
  paymentDate   DateTime
  paymentMethod String
  bankName      String?
  accountNo     String?
  accountName   String?
  proofUrl      String?
  externalId    String?
  vaNumber      String?
  paymentUrl    String?
  status        String     @default("PENDING")
  verifiedBy    String?
  verifiedAt    DateTime?
  receiptNo     String?
  receiptUrl    String?
  notes         String?
  recordedBy    String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  billing       SPPBilling @relation(fields: [billingId], references: [id])

  @@index([billingId])
  @@index([paymentDate])
  @@index([status])
  @@map("spp_payments")
}

model SPPReminder {
  id           String     @id @default(cuid())
  billingId    String
  type         String
  recipient    String
  subject      String?
  message      String
  status       String     @default("PENDING")
  sentAt       DateTime?
  failReason   String?
  scheduledFor DateTime
  attempts     Int        @default(0)
  maxAttempts  Int        @default(3)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  billing      SPPBilling @relation(fields: [billingId], references: [id])

  @@index([billingId])
  @@index([status, scheduledFor])
  @@map("spp_reminders")
}

model SPPSettings {
  id               String   @id @default(cuid())
  level            String   @unique
  monthlyFee       Decimal
  enrollmentFee    Decimal?
  reEnrollmentFee  Decimal?
  developmentFee   Decimal?
  booksFee         Decimal?
  uniformFee       Decimal?
  activityFee      Decimal?
  examFee          Decimal?
  dueDateDay       Int      @default(10)
  lateFeeType      String   @default("FIXED")
  lateFeeAmount    Decimal  @default(10000)
  maxLateDays      Int      @default(30)
  discountSibling  Decimal  @default(10)
  discountOrphan   Decimal  @default(50)
  discountStaff    Decimal  @default(25)
  reminderDays     String   @default("[7, 3, 1, -1, -3, -7]")
  reminderChannels String   @default("[\"WHATSAPP\"]")
  billTemplate     String?
  receiptTemplate  String?
  reminderTemplate String?
  isActive         Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("spp_settings")
}

model SPPReport {
  id          String   @id @default(cuid())
  reportType  String
  period      String
  filters     String   @default("{}")
  data        String
  summary     String
  pdfUrl      String?
  excelUrl    String?
  generatedBy String
  generatedAt DateTime @default(now())
  createdAt   DateTime @default(now())

  @@index([reportType, period])
  @@index([generatedBy, generatedAt])
  @@map("spp_reports")
}

model BusinessUnit {
  id             String                @id @default(cuid())
  code           String                @unique
  name           String
  description    String?
  managerId      String?
  managerName    String?
  bankName       String?
  bankAccount    String?
  isActive       Boolean               @default(true)
  startDate      DateTime              @default(now())
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  transactions   BusinessTransaction[]
  monthlyReports BusinessUnitReport[]

  @@index([code])
  @@map("business_units")
}

model BusinessUnitReport {
  id                String       @id @default(cuid())
  unitId            String
  year              Int
  month             Int
  period            String
  initialCapital    Decimal
  revenue           Decimal
  expenses          Decimal
  purchaseCost      Decimal
  operationalCost   Decimal
  salaryCost        Decimal
  maintenanceCost   Decimal
  otherCost         Decimal
  salesRevenue      Decimal
  serviceRevenue    Decimal
  otherRevenue      Decimal
  grossProfit       Decimal
  netProfit         Decimal
  profitMargin      Decimal
  inventoryValue    Decimal?
  totalTransactions Int          @default(0)
  totalCustomers    Int          @default(0)
  totalItems        Int          @default(0)
  revenueTarget     Decimal?
  targetAchievement Decimal?
  status            String       @default("DRAFT")
  submittedAt       DateTime?
  submittedBy       String?
  approvedAt        DateTime?
  approvedBy        String?
  notes             String?
  highlights        String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  unit              BusinessUnit @relation(fields: [unitId], references: [id])

  @@unique([unitId, year, month])
  @@index([unitId, period])
  @@index([status])
  @@map("business_unit_reports")
}

model BusinessTransaction {
  id            String       @id @default(cuid())
  transactionNo String       @unique
  unitId        String
  date          DateTime
  type          String
  category      String
  amount        Decimal
  paymentMethod String
  customerName  String?
  supplierName  String?
  items         String       @default("[]")
  description   String?
  receiptNo     String?
  recordedBy    String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  unit          BusinessUnit @relation(fields: [unitId], references: [id])

  @@index([unitId, date])
  @@index([type])
  @@map("business_transactions")
}

model TwoFactorVerification {
  id                    String    @id @default(cuid())
  userId                String    @unique
  smsOtp                String?
  smsOtpExpiresAt       DateTime?
  smsAttempts           Int       @default(0)
  totpAttempts          Int       @default(0)
  totpAttemptsResetAt   DateTime?
  smsAttemptsResetAt    DateTime?
  backupAttempts        Int       @default(0)
  backupAttemptsResetAt DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("two_factor_verifications")
}

model SecurityAuditLog {
  id        String   @id @default(cuid())
  userId    String
  event     String
  metadata  Json?
  ipAddress String   @default("unknown")
  userAgent String   @default("unknown")
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([event])
  @@index([timestamp])
  @@map("security_audit_logs")
}

model Question {
  id          String   @id @default(cuid())
  question    String
  category    String
  askerName   String?
  isAnonymous Boolean  @default(false)
  status      String   @default("pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  answer      Answer?

  @@index([status])
  @@index([category])
  @@index([createdAt])
  @@map("questions")
}

model Answer {
  id         String   @id @default(cuid())
  questionId String   @unique
  ustadzId   String
  answer     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  ustadz     User     @relation("UstadzAnswers", fields: [ustadzId], references: [id])

  @@index([ustadzId])
  @@index([createdAt])
  @@map("answers")
}
